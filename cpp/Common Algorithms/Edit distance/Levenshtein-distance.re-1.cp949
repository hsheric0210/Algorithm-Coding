/*
Wagner–Fischer algorithm
Levenshtein distance
Addition, Deletion, Substitution 지원
*/
#define L 1005
#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
int i, j, k, l;
char a[L], b[L];
int dp[L][L];
int main()
{
	cin.getline(a, L);
	cin.getline(b, L);
	k = strlen(a), l = strlen(b);
	for (i = 0; i <= k; i++)
		dp[i][0] = i;
	for (j = 0; j <= l; j++)
		dp[0][j] = j;
	for (i = 1; i <= k; i++)
		for (j = 1; j <= l; j++)
			dp[i][j] = min({ dp[i - 1][j - 1] + (a[i] == b[j]), dp[i - 1][j], dp[i][j - 1] });
	cout << dp[k][l] << endl;
}